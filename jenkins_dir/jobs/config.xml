<?xml version='1.1' encoding='UTF-8'?>
<project>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>URL</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>phoenix</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.70">
      <scriptText>url=&quot;&quot;
binding.variables.each {
   if ( &quot;${it.key}&quot; == &quot;URL&quot; ) {
      url=&quot;${it.value}&quot;
   }
}

pipelineJob(&apos;Pipeline&apos;) {
    description &apos;Build and test the app.&apos;
    scm {
        github &quot;&apos;&quot;+url+&quot;&apos;&quot;
    }
    triggers {
        scm(&apos;H/15 * * * *&apos;)
    }
    definition {
       cps {
          sandbox()
          script(&quot;&quot;&quot;
node {
    currentBuild.result = &quot;SUCCESS&quot;
    sh &apos;date&apos;

    try {

       stage &apos;Pull Sourse Code&apos;
         
            echo &apos;Pull Source Code&apos;
            git url: &apos;${url}&apos;
       
       stage &apos;Parse Message&apos;

            def commit = sh(script: &apos;git rev-parse HEAD&apos;, returnStdout: true)
            def message = sh(script: &apos;git log --format=%B -n 1 \${commit}&apos;, returnStdout: true)
            def author = sh(script: &apos;git --no-pager show -s --format=&quot;%ae&quot; \${commit}&apos;, returnStdout: true)
            def items = message.findAll(/[A-Z]{2,10}-[0-9]+/).unique()
            def env = sh(script: &apos;yq .env &lt; build.yml&apos;, returnStdout: true)
       
       stage &apos;Generate Dockerfile&apos;
        
            echo &apos;Generate Dockerfile&apos;
            sh &apos;pwd; ls -l&apos;
    }
}
          &quot;&quot;&quot;) 
       }
    }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <removedConfigFilesAction>DELETE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
